--User: mongoose

--CREATE NEW USER mongoose

--Password: mongoose

CREATE ROLE mongoose LOGIN
	ENCRYPTED PASSWORD 'mongoose'
	NOSUPERUSER INHERIT CREATEDB NOCREATEROLE NOREPLICATION;

-- Database: mongoose

-- DROP DATABASE mongoose;

CREATE DATABASE mongoose
	WITH OWNER = mongoose
		ENCODING = 'UTF8'
		TABLESPACE = pg_default
		LC_COLLATE = 'ru_RU.UTF-8'
		LC_CTYPE = 'ru_RU.UTF-8'
		CONNECTION LIMIT = -1;

-- Table: API

-- DROP TABLE API;

CREATE TABLE API
(
	id serial NOT NULL,
	name text NOT NULL,
	CONSTRAINT id_api PRIMARY KEY (id)
)
WITH (
	OIDS=FALSE
);
ALTER TABLE API
	OWNER TO mongoose;

-- Table: Classes

-- DROP TABLE Classes;

CREATE TABLE Classes
(
	id bigserial NOT NULL,
	name text NOT NULL,
	CONSTRAINT id_class PRIMARY KEY (id)
)
WITH (
	OIDS=FALSE
);
ALTER TABLE Classes
	OWNER TO mongoose;

-- Table: DataItems

-- DROP TABLE DataItems;

CREATE TABLE DataItems
(
	id bigserial NOT NULL,
	size bigint NOT NULL,
	layer integer NOT NULL,
	mask bigint NOT NULL,
	CONSTRAINT id_data_item PRIMARY KEY (id)
)
WITH (
	OIDS=FALSE
);
ALTER TABLE DataItems
	OWNER TO mongoose;

-- Table: Levels

-- DROP TABLE Levels;

CREATE TABLE Levels
(
	id bigserial NOT NULL,
	name text NOT NULL,
	CONSTRAINT id_level PRIMARY KEY (id)
)
WITH (
	OIDS=FALSE
);
ALTER TABLE Levels
	OWNER TO mongoose;

-- Table: LoadsTypes

-- DROP TABLE LoadsTypes;

CREATE TABLE LoadsTypes
(
	id serial NOT NULL,
	name text NOT NULL,
	CONSTRAINT id_loads_type PRIMARY KEY (id)
)
WITH (
	OIDS=FALSE
);
ALTER TABLE LoadsTypes
	OWNER TO mongoose;

-- Table: Modes

-- DROP TABLE Modes;

CREATE TABLE Modes
(
	id bigserial NOT NULL,
	name text NOT NULL,
	CONSTRAINT id_mode PRIMARY KEY (id)
)
WITH (
	OIDS=FALSE
);
ALTER TABLE Modes
	OWNER TO mongoose;

-- Table: Nodes

-- DROP TABLE Nodes;

CREATE TABLE Nodes
(
	id serial NOT NULL,
	address text NOT NULL,
	CONSTRAINT id_node PRIMARY KEY (id)
)
WITH (
	OIDS=FALSE
);
ALTER TABLE Nodes
	OWNER TO mongoose;

-- Table: Statuses

-- DROP TABLE Statuses;

CREATE TABLE Statuses
(
	code integer NOT NULL,
	name text NOT NULL,
	CONSTRAINT code PRIMARY KEY (code)
)
WITH (
	OIDS=FALSE
);
ALTER TABLE Statuses
	OWNER TO mongoose;

-- Table: Runs

-- DROP TABLE Runs;

CREATE TABLE Runs
(
	id bigserial NOT NULL,
	mode bigint NOT NULL,
	name text NOT NULL,
	CONSTRAINT id_run PRIMARY KEY (id),
	CONSTRAINT mode FOREIGN KEY (mode)
		REFERENCES Modes (id) MATCH SIMPLE
		ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
	OIDS=FALSE
);
ALTER TABLE Runs
	OWNER TO mongoose;

-- Table: Loads

-- DROP TABLE Loads;

CREATE TABLE Loads
(
	id bigserial NOT NULL,
	run bigint NOT NULL,
	type integer NOT NULL,
	num bigint NOT NULL,
	api integer NOT NULL,
	CONSTRAINT id_load PRIMARY KEY (id),
	CONSTRAINT api FOREIGN KEY (api)
		REFERENCES API (id) MATCH SIMPLE
		ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT run FOREIGN KEY (run)
		REFERENCES Runs (id) MATCH SIMPLE
		ON UPDATE CASCADE ON DELETE CASCADE,
		CONSTRAINT type FOREIGN KEY (type)
		REFERENCES LoadsTypes (id) MATCH SIMPLE
		ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
	OIDS=FALSE
);
ALTER TABLE Loads
	OWNER TO mongoose;

-- Table: Messages

-- DROP TABLE Messages;

CREATE TABLE Messages
(
	id bigserial NOT NULL,
	run bigint NOT NULL,
	level bigint NOT NULL,
	class bigint NOT NULL,
	tstamp timestamp without time zone NOT NULL,
	message text,
	CONSTRAINT id_message PRIMARY KEY (id),
	CONSTRAINT class FOREIGN KEY (class)
		REFERENCES Classes (id) MATCH SIMPLE
		ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT level FOREIGN KEY (level)
		REFERENCES Levels (id) MATCH SIMPLE
		ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT run FOREIGN KEY (run)
		REFERENCES Runs (id) MATCH SIMPLE
		ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
	OIDS=FALSE
);
ALTER TABLE Messages
	OWNER TO mongoose;

-- Table: Threads

-- DROP TABLE Threads;

CREATE TABLE Threads
(
	id bigserial NOT NULL,
	load bigint NOT NULL,
	node integer NOT NULL,
	num bigint NOT NULL,
	CONSTRAINT id_thread PRIMARY KEY (id),
	CONSTRAINT load FOREIGN KEY (load)
		REFERENCES Loads (id) MATCH SIMPLE
		ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT node FOREIGN KEY (node)
		REFERENCES Nodes (id) MATCH SIMPLE
		ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
	OIDS=FALSE
);
ALTER TABLE Threads
	OWNER TO mongoose;

-- Table: Traces

-- DROP TABLE Traces;

CREATE TABLE Traces
(
	id bigserial NOT NULL,
	data_item bigint NOT NULL,
	thread bigint NOT NULL,
	status integer NOT NULL,
	ts_req_start bigint NOT NULL,
	req_dur bigint NOT NULL,
	CONSTRAINT id_trace PRIMARY KEY (id),
	CONSTRAINT data_item FOREIGN KEY (data_item)
		REFERENCES DataItems (id) MATCH SIMPLE
		ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT status FOREIGN KEY (status)
		REFERENCES Statuses (code) MATCH SIMPLE
		ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT thread FOREIGN KEY (thread)
		REFERENCES Threads (id) MATCH SIMPLE
		ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
	OIDS=FALSE
);
ALTER TABLE Traces
	OWNER TO mongoose;

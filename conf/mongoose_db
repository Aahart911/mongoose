--for drop all: Drop table api,class,connection,level,dataobject,load,loadtype,message,mode,node,run,status,trace CASCADE;

--User: mongoose

--CREATE NEW USER mongoose

--Password: mongoose

CREATE ROLE mongoose LOGIN
	ENCRYPTED PASSWORD 'mongoose'
	NOSUPERUSER INHERIT CREATEDB NOCREATEROLE NOREPLICATION;

-- Database: mongoose

-- DROP DATABASE mongoose;

CREATE DATABASE mongoose
	WITH OWNER = mongoose
		ENCODING = 'UTF8'
		LC_COLLATE = 'en_US.UTF-8'
		LC_CTYPE = 'en_US.UTF-8'
		CONNECTION LIMIT = -1;

-- Create hibernate_sequence

CREATE SEQUENCE hibernate_sequence
  INCREMENT 1
  MINVALUE 1
  MAXVALUE 9223372036854775807
  START 33
  CACHE 1;
ALTER TABLE hibernate_sequence OWNER TO mongoose;


-- Table: status

-- DROP TABLE status;

CREATE TABLE status
(
  code integer NOT NULL,
  name text NOT NULL,
  CONSTRAINT code PRIMARY KEY (code),
  CONSTRAINT status_name_key UNIQUE (name)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE status
  OWNER TO mongoose;

-- Table: mode

-- DROP TABLE mode;

CREATE TABLE mode
(
  id bigserial NOT NULL,
  name text NOT NULL,
  CONSTRAINT id_mode PRIMARY KEY (id),
  CONSTRAINT mode_name_key UNIQUE (name)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE mode
  OWNER TO mongoose;


-- Table: run

-- DROP TABLE run;

CREATE TABLE run
(
  id bigserial NOT NULL,
  mode bigint NOT NULL,
  name text NOT NULL,
  CONSTRAINT id_run PRIMARY KEY (id),
  CONSTRAINT mode FOREIGN KEY (mode)
      REFERENCES mode (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT run_name_key UNIQUE (name)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE run
  OWNER TO mongoose;


-- Table: dataobject

-- DROP TABLE dataobject;

CREATE TABLE dataobject
(
  identifier text NOT NULL,
  size bigint NOT NULL,
  ringoffset text,
  layer bigint,
  mask bigint,
  CONSTRAINT id_datao_bject PRIMARY KEY (identifier, size)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE dataobject
  OWNER TO mongoose;

-- Table: level

-- DROP TABLE level;

CREATE TABLE level
(
  id bigserial NOT NULL,
  name text NOT NULL,
  CONSTRAINT id_level PRIMARY KEY (id),
  CONSTRAINT level_name_key UNIQUE (name)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE level
  OWNER TO mongoose;


-- Table: class

-- DROP TABLE class;

CREATE TABLE class
(
  id bigserial NOT NULL,
  name text NOT NULL,
  CONSTRAINT id_class PRIMARY KEY (id),
  CONSTRAINT class_name_key UNIQUE (name)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE class
  OWNER TO mongoose;

-- Table: message

-- DROP TABLE message;

CREATE TABLE message
(
  id bigserial NOT NULL,
  run bigint NOT NULL,
  level bigint NOT NULL,
  class bigint NOT NULL,
  tstamp timestamp without time zone NOT NULL,
  message text,
  CONSTRAINT id_message PRIMARY KEY (id, run),
  CONSTRAINT class FOREIGN KEY (class)
      REFERENCES class (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT level FOREIGN KEY (level)
      REFERENCES level (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT run FOREIGN KEY (run)
      REFERENCES run (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE message
  OWNER TO mongoose;

-- Table: api

-- DROP TABLE api;

CREATE TABLE api
(
  id bigserial NOT NULL,
  name text NOT NULL,
  CONSTRAINT id_api PRIMARY KEY (id),
  CONSTRAINT api_name_key UNIQUE (name)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE api
  OWNER TO mongoose;

-- Table: loadtype

-- DROP TABLE loadtype;

CREATE TABLE loadtype
(
  id bigserial NOT NULL,
  name text NOT NULL,
  CONSTRAINT id_loads_type PRIMARY KEY (id),
  CONSTRAINT loadtype_name_key UNIQUE (name)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE loadtype
  OWNER TO mongoose;

-- Table: load

-- DROP TABLE load;

CREATE TABLE load
(
  num bigint NOT NULL,
  run bigint NOT NULL,
  type bigint NOT NULL,
  api bigint NOT NULL,
  CONSTRAINT id_load PRIMARY KEY (num, run),
  CONSTRAINT api FOREIGN KEY (api)
      REFERENCES api (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT run FOREIGN KEY (run)
      REFERENCES run (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT type FOREIGN KEY (type)
      REFERENCES loadtype (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE load
  OWNER TO mongoose;

-- Table: node

-- DROP TABLE node;

CREATE TABLE node
(
  id bigserial NOT NULL,
  address text NOT NULL,
  CONSTRAINT id_node PRIMARY KEY (id),
  CONSTRAINT node_address_key UNIQUE (address)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE node
  OWNER TO mongoose;

-- Table: connection

-- DROP TABLE connection;

CREATE TABLE connection
(
  num bigint NOT NULL,
  load bigint NOT NULL,
  run bigint NOT NULL,
  node bigint NOT NULL,
  CONSTRAINT id_connection PRIMARY KEY (num, load, run),
  CONSTRAINT load FOREIGN KEY (load, run)
      REFERENCES load (num, run) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT node FOREIGN KEY (node)
      REFERENCES node (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE connection
  OWNER TO mongoose;

-- Table: trace

-- DROP TABLE trace;

CREATE TABLE trace
(
  dataobject_id text NOT NULL,
  dataobject_size bigint NOT NULL,
  connection bigint NOT NULL,
  load bigint NOT NULL,
  run bigint NOT NULL,
  status integer NOT NULL,
  tsreqstart bigint NOT NULL,
  latency bigint NOT NULL,
  reqdur bigint NOT NULL,
  CONSTRAINT id_trace PRIMARY KEY (dataobject_id, dataobject_size, connection, load, run),
  CONSTRAINT connection FOREIGN KEY (connection, load, run)
      REFERENCES connection (num, load, run) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT dataobject FOREIGN KEY (dataobject_id, dataobject_size)
      REFERENCES dataobject (identifier, size) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT status FOREIGN KEY (status)
      REFERENCES status (code) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE trace
  OWNER TO mongoose;


import org.gradle.api.tasks.bundling.Compression
import groovy.json.JsonSlurper

apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'war'

sourceCompatibility = '1.7'

distsDirName = 'dist'
dependencyCacheDirName = 'tmp'

def libsDirName = 'lib'
def confDirName = 'conf'

def loadProjectVersionFrom(String sourceFileName) {
	def inputFile = new File(sourceFileName)
	def json = new JsonSlurper().parseText(inputFile.text)
	ext.version = json.properties.run.version
}
loadProjectVersionFrom confDirName + '/properties.json'
version = ext.version

////////////////////////////////////////////////////////////////////////////////////////////////////
// source sets//////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

sourceSets {
	////////////////////////////////////////////////////////////////////////////////////////////////
	// shared basic functionality //////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	common {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'common'].join(File.separator))
			include '**'
		}
		resources {
			srcDir(['src', 'main', 'resources'].join(File.separator))
			include 'allpermissions.policy'
		}
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// core ////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	coreApi {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'core', 'api'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
	}
	coreImpl {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'core', 'impl'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.coreApi.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// storage API adapters ////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	storageAdapterAtmos {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 'atmos'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	storageAdapterS3 {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 's3'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	storageAdapterSwift {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 'swift'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// misc ////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	serverApi {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'server', 'api'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.coreApi.output
	}
	webserver {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'webserver'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// run modes ///////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	client {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'client'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.serverApi.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	scenario {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'scenario'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
		resources {
			srcDir(['src', 'main', 'resources', 'scripts'].join(File.separator))
			include '**'
		}
	}
	serverImpl {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'server', 'impl'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.serverApi.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	storageMock {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'mock'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	webui {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'webui'].join(File.separator))
			include '**'
		}
		//
		compileClasspath += sourceSets.common.output + sourceSets.scenario.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
		compileClasspath += sourceSets.serverApi.output + sourceSets.serverImpl.output
		compileClasspath += sourceSets.storageMock.output
		//
		runtimeClasspath += sourceSets.client.output + sourceSets.storageMock.output
		runtimeClasspath += sourceSets.storageAdapterAtmos.output + sourceSets.storageAdapterS3.output + sourceSets.storageAdapterSwift.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// launcher ////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	cli {
		java {
			srcDirs(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'cli'].join(File.separator))
			include '**'
		}
		//
		compileClasspath += sourceSets.common.output + sourceSets.scenario.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
		compileClasspath += sourceSets.serverApi.output + sourceSets.serverImpl.output
		compileClasspath += sourceSets.webserver.output + sourceSets.webui.output
		compileClasspath += sourceSets.storageMock.output
		//
		runtimeClasspath += sourceSets.client.output + sourceSets.webui.output
		runtimeClasspath += sourceSets.storageAdapterAtmos.output + sourceSets.storageAdapterS3.output + sourceSets.storageAdapterSwift.output
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// dependencies ////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

repositories {
	mavenCentral()
}
apply from: "deps.gradle"

dependencies {

	compile (
		//
		'io.dropwizard.metrics:metrics-core:3.1.0',
		//
		'commons-codec:commons-codec:1.10',
		//
		'org.apache.logging.log4j:log4j-api:2.1',
		'org.apache.logging.log4j:log4j-core:2.1',
		'org.apache.logging.log4j:log4j-web:2.1',
		//
		'org.apache.httpcomponents:httpcore-nio:4.4',
		//
		'org.eclipse.jetty:jetty-server:9.3.0.M1',
		'org.eclipse.jetty:jetty-webapp:9.3.0.M1',
		//
		'javax.servlet:javax.servlet-api:3.1.0',
		'org.mortbay.jetty:jsp-2.1-glassfish:2.1.v20100127',
		'org.eclipse.jetty.websocket:websocket-server:9.3.0.M1',
		'org.eclipse.jetty.websocket:websocket-core:9.0.0.M2',
		//
		'jstl:jstl:1.2',
		'org.apache.commons:commons-collections4:4.0',
		'commons-cli:commons-cli:1.2',
		//
		'com.fasterxml.jackson.core:jackson-annotations:2.4.1',
		'com.fasterxml.jackson.core:jackson-core:2.4.1',
		'com.fasterxml.jackson.core:jackson-databind:2.4.1',
	)
	commonRuntime (
		library.runtime_logging,
	)

	// core
	coreApiCompile (
		library.commons_configuration,
		library.httpcore_plus_nio,
		library.log4j_api,
	)
	coreApiRuntime (
		library.runtime_logging,
	)

	coreImplCompile (
		library.commons_codec,
		library.commons_configuration,
		library.commons_collections4,
		library.httpcore_plus_nio,
		library.log4j_api,
		library.metrics_core,
	)
	coreImplRuntime(
		library.runtime_logging,
	)

	// storage API adapters
	storageAdapterAtmosCompile (
		library.commons_codec,
		library.commons_configuration,
		library.commons_lang,
		library.httpcore,
		library.log4j_api,
	)
	storageAdapterAtmosRuntime (
		library.runtime_logging,
	)

	storageAdapterS3Compile (
		library.commons_lang,
		library.commons_configuration,
		library.httpcore,
		library.log4j_api,
	)
	storageAdapterS3Runtime (
		library.runtime_logging,
	)

	storageAdapterSwiftCompile (
		library.commons_lang,
		library.commons_configuration,
		library.httpcore,
		library.log4j_api,
		library.jackson_core
	)
	storageAdapterSwiftRuntime (
		library.runtime_logging,
	)

	// misc
	serverApiCompile (
		library.httpcore,
	)
	serverApiRuntime (
		library.runtime_logging,
	)

	webserverCompile (
		library.commons_configuration,
		library.log4j_api,
		library.jetty_svc,
	)
	webserverRuntime (
		library.runtime_logging,
		library.runtime_jetty_svc,
	)

	// run modes

	clientCompile (
		library.commons_configuration,
		library.httpcore,
		library.log4j_api,
		library.metrics_core,
	)
	clientRuntime (
		library.runtime_logging,
		library.slf4j_api,
	)

	serverImplCompile (
		library.commons_configuration,
		library.httpcore,
		library.log4j_api,
	)
	serverImplRuntime (
		library.runtime_logging,
	)

	scenarioCompile (
		library.commons_configuration,
		library.log4j_api,
	)
	scenarioRuntime (
		library.jython,
		//library.rhino,
		library.runtime_logging,
	)

	storageMockCompile(
		library.commons_codec,
		library.commons_collections4,
		library.commons_configuration,
		library.httpcore_plus_nio,
		library.log4j_api,
		library.metrics_core,
	)
	storageMockRuntime (
		library.runtime_logging,
	)

	webuiCompile (
		library.commons_collections4,
		library.commons_configuration,
		library.jackson_databind,
		library.jsp_api,
		library.log4j_api_plus_core,
		library.websockets,
	)
	webuiRuntime (
		library.runtime_logging,
		library.runtime_jetty,
		library.runtime_webapp,
		library.ecj,
		library.ant,
		library.websocket_client,
		library.websocket_common,
		library.websocket_core,
		library.websocket_server,
		library.jsp_api,
	)

	// launcher
	cliCompile (
		library.commons_cli,
		library.commons_configuration,
		library.commons_lang,
		library.log4j_api_plus_core,
	)
	cliRuntime (
		library.runtime_logging,
	)
}

configurations {
	allRuntime.extendsFrom(
		commonRuntime,
		coreApiRuntime,
		coreImplRuntime,
		storageAdapterAtmosImplRuntime,
		storageAdapterS3Runtime,
		storageAdapterSwiftRuntime,
		serverApiRuntime,
		webserverRuntime,
		clientRuntime,
		scenarioRuntime,
		serverImplRuntime,
		storageMockRuntime,
		webuiRuntime,
		cliRuntime,
	)
}

////////////////////////////////////////////////////////////////////////////////////////////////////

task compileRMI(dependsOn: "compileServerImplJava") << {
	String[] listClsRemote = [
		'com.emc.mongoose.server.impl.persist.TmpFileItemBufferSvc',
		'com.emc.mongoose.server.impl.load.builder.BasicWSLoadBuilderSvc',
		'com.emc.mongoose.server.impl.load.executor.BasicWSLoadSvc'
	]
	String clsPath = [
		"${sourceSets.common.output.classesDir}",
		"${sourceSets.coreApi.output.classesDir}",
		"${sourceSets.coreImpl.output.classesDir}",
		"${sourceSets.serverApi.output.classesDir}",
		"${sourceSets.serverImpl.output.classesDir}",
		"${configurations.serverImplCompile.asPath}",
	].join(File.pathSeparator)
	for(cls in listClsRemote) {
		String command = """rmic -classpath ${clsPath} -d ${sourceSets.serverImpl.output.classesDir} ${cls}"""
		String test = command.execute().text
		print test
	}
}

ext.sharedManifest = manifest {
	attributes('Implementation-Version': version)
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// common //////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task commonJar(type: Jar) {
	archiveName "${baseName}-common.${extension}"
	from sourceSets.common.output
	manifest {
		from sharedManifest
		attributes (
			'Implementation-Title': rootProject.name + "-core-api",
			'Class-Path': configurations.commonRuntime.collect {
				libsDirName + File.separator + it.getName()
			}.join(' '),
		)
	}
}

distributions {
	main {
		baseName = rootProject.name
		contents {
			into('conf') {
				from { 'conf' }
			}
			into('lib') {
				from { libsDirName }
			}
			into('scripts') {
				from { sourceSets.test.resources }
			}
			into('webapp') {
				from { 'src/main/webapp' }
			}
			into('webapp/WEB-INF/lib') {
				from { configurations.compile.files {dep -> dep.name == 'jstl'} }
				from { configurations.compile.files {dep -> dep.name == 'log4j-web'} }
			}
		}
	}
}

idea {
	module {
		name = rootProject.name
		jdkName = sourceCompatibility
	}
	project.ipr {
		withXml { provider ->
			provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
		}
	}
}

tasks.idea.dependsOn(cleanIdea)

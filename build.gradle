apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'idea'
apply plugin: 'eclipse'
sourceCompatibility = '1.7'

def confDirName = 'conf'
distsDirName = 'dist'
libsDirName = 'lib'
dependencyCacheDirName = 'tmp'

def loadProperties(String sourceFileName) {
	def config = new Properties()
	def propFile = new File(sourceFileName)
	if (propFile.canRead()) {
		config.load(new FileInputStream(propFile))
		for (Map.Entry property in config) {
			ext[property.key] = property.value;
		}
	}
}

loadProperties confDirName + '/properties/run'

version = ext.version

configurations {
	compileRMI {
		transitive = true
	}
	compile {
		extendsFrom compileRMI
		transitive = true
	}
	runtime {
		extendsFrom compile
	}
	providedCompile {
		extendsFrom compile
	}
}

repositories {
    mavenCentral()
}

dependencies {

	compile (
		//
		'io.dropwizard.metrics:metrics-core:3.1.0',
		//
		'commons-codec:commons-codec:1.10',
		//
		'org.apache.logging.log4j:log4j-api:2.1',
		'org.apache.logging.log4j:log4j-core:2.1',
		'org.apache.logging.log4j:log4j-web:2.1',
		//
		'org.apache.httpcomponents:httpcore-nio:4.4',
		//
        'org.eclipse.jetty:jetty-server:9.3.0.M1',
		'org.eclipse.jetty:jetty-webapp:9.3.0.M1',
		//
		'javax.servlet:javax.servlet-api:3.1.0',
        'org.mortbay.jetty:jsp-2.1-glassfish:2.1.v20100127',
		'org.eclipse.jetty.websocket:websocket-server:9.3.0.M1',
		'org.eclipse.jetty.websocket:websocket-core:9.0.0.M2',
		//
		'jstl:jstl:1.2',
		'org.apache.commons:commons-collections4:4.0',
		'commons-cli:commons-cli:1.2',
		//
		'com.fasterxml.jackson.core:jackson-annotations:2.4.1',
		'com.fasterxml.jackson.core:jackson-core:2.4.1',
		'com.fasterxml.jackson.core:jackson-databind:2.4.1',
	)

	compileRMI (
		'commons-configuration:commons-configuration:1.10',
		'org.apache.httpcomponents:httpcore:4.4',
		'org.apache.logging.log4j:log4j-api:2.1'
	)

	runtime (
		//
		'com.github.rickyclarkson:jmdns:3.4.2-r353-1',
		//
		'commons-lang:commons-lang:2.6',
		'commons-logging:commons-logging:1.2',
		//
		'org.apache.logging.log4j:log4j-slf4j-impl:2.1',
		'org.apache.logging.log4j:log4j-jcl:2.1',
		'org.apache.logging.log4j:log4j-jul:2.1',
		//'org.slf4j:slf4j-api:1.7.7',
		'com.lmax:disruptor:3.3.0',
		//
		'org.python:jython-standalone:2.7-b3',
		'org.fusesource.jansi:jansi:1.11'
	)


	testCompile group: 'junit', name: 'junit', version: '4.11'
}

task rmic(dependsOn: compileJava) << {
	String[] listClsRemote = [
		'com.emc.mongoose.base.data.persist.TmpFileItemBuffer',
		'com.emc.mongoose.web.load.server.impl.BasicLoadBuilderSvc',
		'com.emc.mongoose.web.load.server.impl.BasicWSLoadSvc'
	]
	String clsPath = """${sourceSets.main.output.classesDir}${System.properties.'path.separator'}${configurations.compileRMI.asPath}"""
	for(cls in listClsRemote) {
		String command = """rmic -classpath ${clsPath} -d ${sourceSets.main.output.classesDir} ${cls}"""
		//println command
		String test = command.execute().text
		print test
	}
}

jar {
	dependsOn(rmic)
	archiveName "${baseName}.${extension}"
	def clsPath = configurations.runtime.collect { 'lib/'+it.name }.join(' ')
	manifest {
		attributes (
			'Implementation-Title': rootProject.name,
			'Implementation-Version': version,
			'Main-Class': 'com.emc.mongoose.run.Main',
			'Class-Path': clsPath
		)
	}
}

distributions {
	main {
		baseName = rootProject.name
		contents {
			into('conf') {
				from { 'conf' }
			}
			into('lib') {
				from { libsDirName }
			}
			into('scripts') {
				from { sourceSets.test.resources }
			}
			into('webapp') {
				from { 'src/main/webapp' }
			}
			into('webapp/WEB-INF/lib') {
				from { configurations.compile.files {dep -> dep.name == 'jstl'} }
				from { configurations.compile.files {dep -> dep.name == 'log4j-web'} }
			}
		}
	}
}

idea {
	module {
		name = rootProject.name
		jdkName = sourceCompatibility
	}
	project.ipr {
		withXml { provider ->
			provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
		}
	}
}

tasks.idea.dependsOn(cleanIdea)

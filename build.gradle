import org.gradle.api.tasks.bundling.Compression
import groovy.json.JsonSlurper

apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'idea'
apply plugin: 'eclipse'
sourceCompatibility = '1.7'

def confDirName = 'conf'
distsDirName = 'dist'
libsDirName = 'lib'
dependencyCacheDirName = 'tmp'

def loadProjectVersionFrom(String sourceFileName) {
	def inputFile = new File(sourceFileName)
	def json = new JsonSlurper().parseText(inputFile.text)
	ext.version = json.properties.run.version
}

loadProjectVersionFrom confDirName + '/properties.json'

version = ext.version

configurations {
	compileRMI {
		transitive = true
	}
	compile {
		extendsFrom compileRMI
		transitive = true
	}
	runtime {
		extendsFrom compile
	}
}

repositories {
    mavenCentral()
}

dependencies {

	compile (
		//
		'io.dropwizard.metrics:metrics-core:3.1.0',
		//
		'commons-codec:commons-codec:1.10',
		//
		'org.apache.logging.log4j:log4j-api:2.1',
		'org.apache.logging.log4j:log4j-core:2.1',
		'org.apache.logging.log4j:log4j-web:2.1',
		//
		'org.apache.httpcomponents:httpcore-nio:4.4',
		//
		'org.eclipse.jetty:jetty-server:9.3.0.M1',
		'org.eclipse.jetty:jetty-webapp:9.3.0.M1',
		//
		'javax.servlet:javax.servlet-api:3.1.0',
		'org.mortbay.jetty:jsp-2.1-glassfish:2.1.v20100127',
		'org.eclipse.jetty.websocket:websocket-server:9.3.0.M1',
		'org.eclipse.jetty.websocket:websocket-core:9.0.0.M2',
		//
		'jstl:jstl:1.2',
		'org.apache.commons:commons-collections4:4.0',
		'commons-cli:commons-cli:1.2',
		//
		'com.fasterxml.jackson.core:jackson-annotations:2.4.1',
		'com.fasterxml.jackson.core:jackson-core:2.4.1',
		'com.fasterxml.jackson.core:jackson-databind:2.4.1',
	)

	compileRMI (
		'commons-configuration:commons-configuration:1.10',
		'org.apache.httpcomponents:httpcore:4.4',
		'org.apache.logging.log4j:log4j-api:2.1',
	)

	runtime (
		//
		'com.github.rickyclarkson:jmdns:3.4.2-r353-1',
		//
		'commons-lang:commons-lang:2.6',
		'commons-logging:commons-logging:1.2',
		//
		'org.apache.logging.log4j:log4j-slf4j-impl:2.1',
		'org.apache.logging.log4j:log4j-jcl:2.1',
		'org.apache.logging.log4j:log4j-jul:2.1',
		//'org.slf4j:slf4j-api:1.7.7',
		'com.lmax:disruptor:3.3.0',
		'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.4.1',
		'org.fusesource.jansi:jansi:1.11',
		//
		'org.python:jython-standalone:2.7-b3',
	)


	testCompile group: 'junit', name: 'junit', version: '4.11'
}

task rmic << {
	String[] listClsRemote = [
		'com.emc.mongoose.server.impl.persist.TmpFileItemBufferSvc',
		'com.emc.mongoose.server.impl.load.builder.BasicWSLoadBuilderSvc',
		'com.emc.mongoose.server.impl.load.executor.BasicWSLoadSvc'
	]
	String clsPath = """${sourceSets.main.output.classesDir}${System.properties.'path.separator'}${configurations.compileRMI.asPath}"""
	for(cls in listClsRemote) {
		String command = """rmic -classpath ${clsPath} -d ${sourceSets.main.output.classesDir} ${cls}"""
		//println command
		String test = command.execute().text
		print test
	}
}

ext.sharedManifest = manifest {
	attributes('Implementation-Version': version)
}

task coreApiJar(type: Jar) {
	archiveName "${baseName}-core-api.${extension}"
	from(sourceSets.main.output) {
		exclude "com/emc/mongoose/client/**"
		include "com/emc/mongoose/core/api/**"
		exclude "com/emc/mongoose/core/impl/**"
		exclude "com/emc/mongoose/run/**"
		exclude "com/emc/mongoose/server/**"
		exclude "com/emc/mongoose/storage/adapter/atmos/**"
		exclude "com/emc/mongoose/storage/adapter/s3/**"
		exclude "com/emc/mongoose/storage/adapter/swift/**"
		exclude "com/emc/mongoose/storage/mock/**"
		exclude "com/emc/mongoose/webui/**"

	}
	manifest {
		from sharedManifest
		attributes ('Implementation-Title': rootProject.name + "-core-api")
	}
}

task coreImplJar(type: Jar) {
	archiveName "${baseName}-core-impl.${extension}"
	from(sourceSets.main.output) {
		exclude "com/emc/mongoose/client/**"
		exclude "com/emc/mongoose/core/api/**"
		include "com/emc/mongoose/core/impl/**"
		exclude "com/emc/mongoose/run/**"
		exclude "com/emc/mongoose/server/**"
		exclude "com/emc/mongoose/storage/adapter/atmos/**"
		exclude "com/emc/mongoose/storage/adapter/s3/**"
		exclude "com/emc/mongoose/storage/adapter/swift/**"
		exclude "com/emc/mongoose/storage/mock/**"
		exclude "com/emc/mongoose/webui/**"
	}
	manifest {
		from sharedManifest
		attributes('Implementation-Title': rootProject.name + "-core-impl")
	}
}

task storageAdapterAtmosJar(type: Jar) {
	archiveName "${baseName}-storage-adapter-atmos.${extension}"
	from(sourceSets.main.output) {
		exclude "com/emc/mongoose/client/**"
		exclude "com/emc/mongoose/core/api/**"
		exclude "com/emc/mongoose/core/impl/**"
		exclude "com/emc/mongoose/run/**"
		exclude "com/emc/mongoose/server/**"
		include "com/emc/mongoose/storage/adapter/atmos/**"
		exclude "com/emc/mongoose/storage/adapter/s3/**"
		exclude "com/emc/mongoose/storage/adapter/swift/**"
		exclude "com/emc/mongoose/storage/mock/**"
		exclude "com/emc/mongoose/webui/**"
	}
	manifest {
		from sharedManifest
		attributes('Implementation-Title': rootProject.name + "-storage-adapter-atmos")
	}
}

task storageAdapterS3Jar(type: Jar) {
	archiveName "${baseName}-storage-adapter-s3.${extension}"
	from(sourceSets.main.output) {
		exclude "com/emc/mongoose/client/**"
		exclude "com/emc/mongoose/core/api/**"
		exclude "com/emc/mongoose/core/impl/**"
		exclude "com/emc/mongoose/run/**"
		exclude "com/emc/mongoose/server/**"
		exclude "com/emc/mongoose/storage/adapter/atmos/**"
		include "com/emc/mongoose/storage/adapter/s3/**"
		exclude "com/emc/mongoose/storage/adapter/swift/**"
		exclude "com/emc/mongoose/storage/mock/**"
		exclude "com/emc/mongoose/webui/**"
	}
	manifest {
		from sharedManifest
		attributes('Implementation-Title': rootProject.name + "-storage-adapter-s3s")
	}
}

task storageAdapterSwiftJar(type: Jar) {
	archiveName "${baseName}-storage-adapter-swift.${extension}"
	from(sourceSets.main.output) {
		exclude "com/emc/mongoose/client/**"
		exclude "com/emc/mongoose/core/api/**"
		exclude "com/emc/mongoose/core/impl/**"
		exclude "com/emc/mongoose/run/**"
		exclude "com/emc/mongoose/server/**"
		exclude "com/emc/mongoose/storage/adapter/atmos/**"
		exclude "com/emc/mongoose/storage/adapter/s3/**"
		include "com/emc/mongoose/storage/adapter/swift/**"
		exclude "com/emc/mongoose/storage/mock/**"
		exclude "com/emc/mongoose/webui/**"
	}
	manifest {
		from sharedManifest
		attributes('Implementation-Title': rootProject.name + "-storage-adapter-swift")
	}
}

task clientJar(type: Jar) {
	archiveName "${baseName}-client-impl.${extension}"
	from(sourceSets.main.output) {
		include "com/emc/mongoose/client/**"
		exclude "com/emc/mongoose/core/api/**"
		exclude "com/emc/mongoose/core/impl/**"
		exclude "com/emc/mongoose/run/**"
		exclude "com/emc/mongoose/server/**"
		exclude "com/emc/mongoose/storage/adapter/atmos/**"
		exclude "com/emc/mongoose/storage/adapter/s3/**"
		exclude "com/emc/mongoose/storage/adapter/swift/**"
		exclude "com/emc/mongoose/storage/mock/**"
		exclude "com/emc/mongoose/webui/**"
	}
	manifest {
		from sharedManifest
		attributes('Implementation-Title': rootProject.name + "-client-impl")
	}
}

task serverJar(type: Jar, dependsOn: "rmic") {
	archiveName "${baseName}-server-impl.${extension}"
	from(sourceSets.main.output) {
		exclude "com/emc/mongoose/client/**"
		exclude "com/emc/mongoose/core/api/**"
		exclude "com/emc/mongoose/core/impl/**"
		exclude "com/emc/mongoose/run/**"
		include "com/emc/mongoose/server/**"
		exclude "com/emc/mongoose/storage/adapter/atmos/**"
		exclude "com/emc/mongoose/storage/adapter/s3/**"
		exclude "com/emc/mongoose/storage/adapter/swift/**"
		exclude "com/emc/mongoose/storage/mock/**"
		exclude "com/emc/mongoose/webui/**"
	}
	manifest {
		from sharedManifest
		attributes('Implementation-Title': rootProject.name + "-server-impl")
	}
}

task storageMockJar(type: Jar) {
	archiveName "${baseName}-storage-mock.${extension}"
	from(sourceSets.main.output) {
		exclude "com/emc/mongoose/client/**"
		exclude "com/emc/mongoose/core/api/**"
		exclude "com/emc/mongoose/core/impl/**"
		exclude "com/emc/mongoose/run/**"
		exclude "com/emc/mongoose/server/**"
		exclude "com/emc/mongoose/storage/adapter/atmos/**"
		exclude "com/emc/mongoose/storage/adapter/s3/**"
		exclude "com/emc/mongoose/storage/adapter/swift/**"
		include "com/emc/mongoose/storage/mock/**"
		exclude "com/emc/mongoose/webui/**"
	}
	manifest {
		from sharedManifest
		attributes('Implementation-Title': rootProject.name + "-storage-mock")
	}
}

task webuiJar(type: Jar) {
	archiveName "${baseName}-webui.${extension}"
	from(sourceSets.main.output) {
		exclude "com/emc/mongoose/client/**"
		exclude "com/emc/mongoose/core/api/**"
		exclude "com/emc/mongoose/core/impl/**"
		exclude "com/emc/mongoose/run/**"
		exclude "com/emc/mongoose/server/**"
		exclude "com/emc/mongoose/storage/adapter/atmos/**"
		exclude "com/emc/mongoose/storage/adapter/s3/**"
		exclude "com/emc/mongoose/storage/adapter/swift/**"
		exclude "com/emc/mongoose/storage/mock/**"
		include "com/emc/mongoose/webui/**"
	}
	manifest {
		from sharedManifest
		attributes('Implementation-Title': rootProject.name + "-webui")
	}
}

task runJar(type: Jar) {

	dependsOn coreApiJar
	dependsOn coreImplJar
	dependsOn storageAdapterAtmosJar
	dependsOn storageAdapterS3Jar
	dependsOn storageAdapterSwiftJar
	dependsOn clientJar
	dependsOn serverJar
	dependsOn storageMockJar
	dependsOn webuiJar

	def componentsClsPath = [
		"lib" + File.separator + coreApiJar.archiveName,
		"lib" + File.separator + coreImplJar.archiveName,
		"lib" + File.separator + storageAdapterAtmosJar.archiveName,
		"lib" + File.separator + storageAdapterS3Jar.archiveName,
		"lib" + File.separator + storageAdapterSwiftJar.archiveName,
		"lib" + File.separator + clientJar.archiveName,
		"lib" + File.separator + serverJar.archiveName,
		"lib" + File.separator + storageMockJar.archiveName,
		"lib" + File.separator + webuiJar.archiveName
	].join(' ')

	def allDepsClsPath = configurations.runtime.collect { "lib" + File.separator + it.name }.join(' ')

	archiveName "${baseName}.${extension}"

	from(sourceSets.main.output) {
		exclude "com/emc/mongoose/client/**"
		exclude "com/emc/mongoose/core/api/**"
		exclude "com/emc/mongoose/core/impl/**"
		include "com/emc/mongoose/run/**"
		exclude "com/emc/mongoose/server/**"
		exclude "com/emc/mongoose/storage/adapter/atmos/**"
		exclude "com/emc/mongoose/storage/adapter/s3/**"
		exclude "com/emc/mongoose/storage/adapter/swift/**"
		exclude "com/emc/mongoose/storage/mock/**"
		exclude "com/emc/mongoose/webui/**"
	}

	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-run",
			'Main-Class': 'com.emc.mongoose.run.Main',
			'Class-Path': [componentsClsPath, allDepsClsPath].join(' ')
		)
	}
}

task dist(type: Tar) {

	dependsOn coreApiJar
	dependsOn coreImplJar
	dependsOn storageAdapterAtmosJar
	dependsOn storageAdapterS3Jar
	dependsOn storageAdapterSwiftJar
	dependsOn clientJar
	dependsOn serverJar
	dependsOn storageMockJar
	dependsOn runJar
	dependsOn webuiJar

	baseName = project.name
	compression = Compression.GZIP

	into(baseName + '-' + version) {
		into('conf') {
			from { 'conf' }
		}
		into('lib') {
			from coreApiJar.outputs.files
			from coreImplJar.outputs.files
			from storageAdapterAtmosJar.outputs.files
			from storageAdapterS3Jar.outputs.files
			from storageAdapterSwiftJar.outputs.files
			from clientJar.outputs.files
			from serverJar.outputs.files
			from storageMockJar.outputs.files
			from webuiJar.outputs.files
			from configurations.runtime
		}
		from runJar.outputs.files
		into('scripts') {
			from { sourceSets.test.resources }
		}
		into('webapp') {
			from { 'src/main/webapp' }
		}
		into('webapp/WEB-INF/lib') {
			from { configurations.compile.files { dep -> dep.name == 'jstl' } }
			from { configurations.compile.files { dep -> dep.name == 'log4j-web' } }
		}
	}
}

idea {
	module {
		name = rootProject.name
		jdkName = sourceCompatibility
	}
	project.ipr {
		withXml { provider ->
			provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
		}
	}
}

tasks.idea.dependsOn(cleanIdea)

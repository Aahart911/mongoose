import groovy.json.JsonSlurper

description = 'Mongoose - high-load storage performance testing automation tool'

def loadProjectVersionFrom(String sourceFileName) {
	def inputFile = new File(sourceFileName)
	def json = new JsonSlurper().parseText(inputFile.text)
	json.version
}

def collectFilePath(String... pathChunks) {
	def pathBuilder = new StringBuilder()
	def separator = File.separator
	pathChunks.each {
		pathBuilder.append(separator)
		pathBuilder.append(it)
	}
	pathBuilder.toString()
}

def configFilePath = "." + collectFilePath('ui', 'src', 'main', 'resources', 'defaults.json');
version = loadProjectVersionFrom configFilePath

subprojects {
	apply plugin: "java"

	version = super.version

	tasks.withType(JavaCompile) {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}

	task "create-dirs" << {
		sourceSets*.java.srcDirs*.each { it.mkdirs() }
		sourceSets*.resources.srcDirs*.each { it.mkdirs() }
	}

	repositories {
		mavenCentral()
	}

	def log4jVersion = '2.6.2';
	def nettyVersion = '4.1.2.Final';
	def jacksonVersion = '2.8.0';

	dependencies {

		compile(

			"commons-lang:commons-lang:2.6",
			"org.apache.commons:commons-collections4:4.1",
			"io.dropwizard.metrics:metrics-core:3.1.2",

			"org.apache.logging.log4j:log4j-core:${log4jVersion}",
			"org.apache.logging.log4j:log4j-iostreams:${log4jVersion}",
			"org.apache.logging.log4j:log4j-jul:${log4jVersion}",

			"com.lmax:disruptor:3.3.4",

			"com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
			"com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",

			"io.netty:netty-common:${nettyVersion}",
			"io.netty:netty-buffer:${nettyVersion}",
			"io.netty:netty-transport:${nettyVersion}",
			"io.netty:netty-handler:${nettyVersion}",
			"io.netty:netty-codec-http:${nettyVersion}",

			"org.eclipse.jetty:jetty-util:9.4.0.M0",

			"it.unimi.dsi:fastutil:7.0.12"
		)

		testCompile "junit:junit:4.12"
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "2.14"
}

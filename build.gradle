import org.gradle.api.tasks.bundling.Compression

apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'idea'
apply plugin: 'eclipse'
sourceCompatibility = '1.7'

def confDirName = 'conf'
distsDirName = 'dist'
libsDirName = 'lib'
dependencyCacheDirName = 'tmp'

def loadProperties(String sourceFileName) {
	def config = new Properties()
	def propFile = new File(sourceFileName)
	if (propFile.canRead()) {
		config.load(new FileInputStream(propFile))
		for (Map.Entry property in config) {
			ext[property.key] = property.value;
		}
	}
}

loadProperties confDirName + File.separator + 'properties' + File.separator + 'run'

version = ext.version

repositories {
    mavenCentral()
}

configurations {
	compileRMI {
		transitive = true
	}
	compile {
		extendsFrom compileRMI
		transitive = true
	}
	runtime {
		extendsFrom compile
	}
}

sourceSets {
	cli {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'cli'].join(File.separator))
			include '**'
		}
	}
	common {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'common'].join(File.separator))
			include '**'
		}
		resources {
			srcDir(['src', 'main', 'resources', 'META-INF'].join(File.separator))
			include 'allpermission.policy'
		}
	}
	coreApi {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'core', 'api'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
	}
	coreImpl {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'core', 'impl'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.coreApi.output
	}
	serverApi {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'server', 'api'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.coreApi.output
	}
	serverImpl {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'server', 'impl'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.coreApi + sourceSets.coreImpl.output + sourceSets.serverApi.output
	}
	client {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'client'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.coreApi.output + sourceSets.serverApi.output
	}
	scenario {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'scenario'].join(File.separator))
			include '**'
		}
	}
	webserver {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'webserver'].join(File.separator))
			include '**'
		}
	}
	storageAdapterAtmos {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 'atmos'].join(File.separator))
			include '**'
		}
	}
	storageAdapterS3 {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 's3'].join(File.separator))
			include '**'
		}
	}
	storageAdapterSwift {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 'swift'].join(File.separator))
			include '**'
		}
	}
	storageMock {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'wsmock'].join(File.separator))
			include '**'
		}
	}
	webui {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'webui'].join(File.separator))
			include '**'
		}
	}
	run {
		java {
			srcDirs(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run'].join(File.separator))
			include 'Main.java'
		}
		compileClasspath += sourceSets.common.output
	}
}

dependencies {

	compile (
		//
		'io.dropwizard.metrics:metrics-core:3.1.0',
		//
		'commons-codec:commons-codec:1.10',
		//
		'org.apache.logging.log4j:log4j-api:2.1',
		'org.apache.logging.log4j:log4j-core:2.1',
		'org.apache.logging.log4j:log4j-web:2.1',
		//
		'org.apache.httpcomponents:httpcore-nio:4.4',
		//
		'org.eclipse.jetty:jetty-server:9.3.0.M1',
		'org.eclipse.jetty:jetty-webapp:9.3.0.M1',
		//
		'javax.servlet:javax.servlet-api:3.1.0',
		'org.mortbay.jetty:jsp-2.1-glassfish:2.1.v20100127',
		'org.eclipse.jetty.websocket:websocket-server:9.3.0.M1',
		'org.eclipse.jetty.websocket:websocket-core:9.0.0.M2',
		//
		'jstl:jstl:1.2',
		'org.apache.commons:commons-collections4:4.0',
		'commons-cli:commons-cli:1.2',
		//
		'com.fasterxml.jackson.core:jackson-annotations:2.4.1',
		'com.fasterxml.jackson.core:jackson-core:2.4.1',
		'com.fasterxml.jackson.core:jackson-databind:2.4.1',
	)

	compileRMI (
		'commons-configuration:commons-configuration:1.10',
		'org.apache.httpcomponents:httpcore:4.4',
		'org.apache.logging.log4j:log4j-api:2.1',
	)

	runtime (
		//
		'com.github.rickyclarkson:jmdns:3.4.2-r353-1',
		//
		'commons-lang:commons-lang:2.6',
		'commons-logging:commons-logging:1.2',
		//
		'org.apache.logging.log4j:log4j-slf4j-impl:2.1',
		'org.apache.logging.log4j:log4j-jcl:2.1',
		'org.apache.logging.log4j:log4j-jul:2.1',
		//'org.slf4j:slf4j-api:1.7.7',
		'com.lmax:disruptor:3.3.0',
		'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.4.1',
		'org.fusesource.jansi:jansi:1.11',
		//
		'org.python:jython-standalone:2.7-b3',
	)

	cliCompile (
		'commons-cli:commons-cli:1.2',
		'commons-lang:commons-lang:2.6',
	)

	commonCompile (
		'commons-configuration:commons-configuration:1.10',
		'commons-lang:commons-lang:2.6',
		'org.apache.commons:commons-collections4:4.0',
		'org.apache.httpcomponents:httpcore:4.4',
		'org.apache.httpcomponents:httpcore-nio:4.4',
		'org.apache.logging.log4j:log4j-api:2.1',
		'org.apache.logging.log4j:log4j-core:2.1',
		'com.fasterxml.jackson.core:jackson-core:2.4.1',
		'com.fasterxml.jackson.core:jackson-databind:2.4.1',
	)

	commonRuntime (
		'commons-logging:commons-logging:1.2',
		'com.fasterxml.jackson.core:jackson-annotations:2.4.1',
		'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.4.1',
		'org.apache.logging.log4j:log4j-jcl:2.1',
		'org.apache.logging.log4j:log4j-jul:2.1',
		'org.apache.logging.log4j:log4j-slf4j-impl:2.1',
		'org.fusesource.jansi:jansi:1.11',
		'com.lmax:disruptor:3.3.0',
	)

	coreApiCompile (
		'commons-configuration:commons-configuration:1.10',
		'org.apache.httpcomponents:httpcore:4.4',
		'org.apache.httpcomponents:httpcore-nio:4.4',
		'org.apache.logging.log4j:log4j-api:2.1',
	)

	coreImplCompile (
		'commons-codec:commons-codec:1.10',
		'commons-configuration:commons-configuration:1.10',
		'org.apache.commons:commons-collections4:4.0',
		'org.apache.httpcomponents:httpcore:4.4',
		'org.apache.httpcomponents:httpcore-nio:4.4',
		'org.apache.logging.log4j:log4j-api:2.1',
		'io.dropwizard.metrics:metrics-core:3.1.0',
	)

	clientCompile (
		'org.apache.logging.log4j:log4j-api:2.1',
		'io.dropwizard.metrics:metrics-core:3.1.0',
	)

	clientRuntime (
		'commons-logging:commons-logging:1.2',
		'com.fasterxml.jackson.core:jackson-annotations:2.4.1',
		'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.4.1',
		'com.lmax:disruptor:3.3.0',
	)

	testCompile group: 'junit', name: 'junit', version: '4.11'
}

def allDepsClsPath = configurations.runtime.collect { libsDirName + File.separator + it.name }.join(' ')

task rmic << {
	String[] listClsRemote = [
		'com.emc.mongoose.server.impl.persist.TmpFileItemBufferSvc',
		'com.emc.mongoose.server.impl.load.builder.BasicWSLoadBuilderSvc',
		'com.emc.mongoose.server.impl.load.executor.BasicWSLoadSvc'
	]
	String clsPath = """${sourceSets.main.output.classesDir}${File.separator}${configurations.compileRMI.asPath}"""
	for(cls in listClsRemote) {
		String command = """rmic -classpath ${clsPath} -d ${sourceSets.main.output.classesDir} ${cls}"""
		//println command
		String test = command.execute().text
		print test
	}
}

ext.sharedManifest = manifest {
	attributes('Implementation-Version': version)
}

task commonJar(type: Jar) {
	archiveName "${baseName}-common.${extension}"
	from sourceSets.common.output
	manifest {
		from sharedManifest
		attributes ('Implementation-Title': rootProject.name + "-core-api")
	}
}

task coreApiJar(type: Jar) {
	archiveName "${baseName}-core-api.${extension}"
	from sourceSets.coreApi.output
	manifest {
		from sharedManifest
		attributes (
			'Implementation-Title': rootProject.name + "-core-api",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task coreImplJar(type: Jar) {
	archiveName "${baseName}-core-impl.${extension}"
	from sourceSets.coreImpl.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-core-impl",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task storageAdapterAtmosJar(type: Jar) {
	archiveName "${baseName}-storage-adapter-atmos.${extension}"
	from sourceSets.storageAdapterAtmos.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-storage-adapter-atmos",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task storageAdapterS3Jar(type: Jar) {
	archiveName "${baseName}-storage-adapter-s3.${extension}"
	from sourceSets.storageAdapterS3.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-storage-adapter-s3s",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task storageAdapterSwiftJar(type: Jar) {
	archiveName "${baseName}-storage-adapter-swift.${extension}"
	from sourceSets.storageAdapterSwift.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-storage-adapter-swift",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task serverApiJar(type: Jar, dependsOn: "rmic") {
	archiveName "${baseName}-server-api.${extension}"
	from sourceSets.serverApi.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-server-api",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task serverImplJar(type: Jar, dependsOn: "rmic") {
	archiveName "${baseName}-server-impl.${extension}"
	from sourceSets.serverImpl.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-server-impl",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task clientJar(type: Jar) {
	archiveName "${baseName}-client.${extension}"
	from sourceSets.client.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-client-impl",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task storageMockJar(type: Jar) {
	archiveName "${baseName}-storage-mock.${extension}"
	from sourceSets.storageMock.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-storage-mock",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task scenarioJar(type: Jar) {
	archiveName "${baseName}-scenario.${extension}"
	from sourceSets.scenario.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-scenario",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' ')
			].join(' ')
		)
	}
}

task cliJar(type: Jar) {
	archiveName "${baseName}-cli.${extension}"
	from sourceSets.cli.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-cli",
			'Class-Path': [
				allDepsClsPath,
			].join(' ')
		)
	}
}

task webserverJar(type: Jar) {
	archiveName "${baseName}-webserver.${extension}"
	from sourceSets.webserver.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-webserver",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' ')
			].join(' ')
		)
	}
}

task webuiJar(type: Jar) {
	archiveName "${baseName}-webui.${extension}"
	from sourceSets.webui.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-webui",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
				serverImplJar.outputs.files.collect {it.name}.join(' '),
				scenarioJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task runJar(type: Jar) {
	archiveName "${baseName}.${extension}"
	from sourceSets.run.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-run",
			'Main-Class': 'com.emc.mongoose.run.Main',
			'Class-Path': [
				allDepsClsPath,
				clientJar.outputs.files.collect {it.name}.join(' '),
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
				serverImplJar.outputs.files.collect {it.name}.join(' '),
				storageAdapterAtmosJar.outputs.files.collect {it.name}.join(' '),
				storageAdapterS3Jar.outputs.files.collect {it.name}.join(' '),
				storageAdapterSwiftJar.outputs.files.collect {it.name}.join(' '),
				storageMockJar.outputs.files.collect {it.name}.join(' '),
				cliJar.outputs.files.collect {it.name}.join(' '),
				scenarioJar.outputs.files.collect {it.name}.join(' '),
				webserverJar.outputs.files.collect {it.name}.join(' '),
				webuiJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task dist(type: Tar) {

	dependsOn commonJar
	dependsOn coreApiJar
	dependsOn coreImplJar
	dependsOn storageAdapterAtmosJar
	dependsOn storageAdapterS3Jar
	dependsOn storageAdapterSwiftJar
	dependsOn clientJar
	dependsOn serverApiJar
	dependsOn serverImplJar
	dependsOn storageMockJar
	dependsOn cliJar
	dependsOn scenarioJar
	dependsOn webserverJar
	dependsOn runJar
	dependsOn webuiJar

	baseName = project.name
	compression = Compression.GZIP

	into(baseName + '-' + version) {
		into('conf') {
			from { 'conf' }
		}
		into('lib') {
			from configurations.runtime
		}
		from commonJar.outputs.files
		from coreApiJar.outputs.files
		from coreImplJar.outputs.files
		from storageAdapterAtmosJar.outputs.files
		from storageAdapterS3Jar.outputs.files
		from storageAdapterSwiftJar.outputs.files
		from clientJar.outputs.files
		from serverApiJar.outputs.files
		from serverImplJar.outputs.files
		from storageMockJar.outputs.files
		from webuiJar.outputs.files
		from cliJar.outputs.files
		from scenarioJar.outputs.files
		from webserverJar.outputs.files
		from runJar.outputs.files
		into('scripts') {
			from { sourceSets.test.resources }
		}
		into('webapp') {
			from { 'src/main/webapp' }
		}
		into('webapp/WEB-INF/lib') {
			from { configurations.compile.files { dep -> dep.name == 'jstl' } }
			from { configurations.compile.files { dep -> dep.name == 'log4j-web' } }
		}
	}
}

idea {
	module {
		name = rootProject.name
		jdkName = sourceCompatibility
	}
	project.ipr {
		withXml { provider ->
			provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
		}
	}
}

tasks.idea.dependsOn(cleanIdea)

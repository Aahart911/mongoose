import org.gradle.api.tasks.bundling.Compression

apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = '1.7'

distsDirName = 'dist'
dependencyCacheDirName = 'tmp'

def libsDirName = 'lib'
def confDirName = 'conf'

def loadProperties(String sourceFileName) {
	def config = new Properties()
	def propFile = new File(sourceFileName)
	if (propFile.canRead()) {
		config.load(new FileInputStream(propFile))
		for (Map.Entry property in config) {
			ext[property.key] = property.value;
		}
	}
}
loadProperties confDirName + File.separator + 'properties' + File.separator + 'run'
version = ext.version

////////////////////////////////////////////////////////////////////////////////////////////////////
// source sets//////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

sourceSets {
	////////////////////////////////////////////////////////////////////////////////////////////////
	// shared basic functionality //////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	common {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'common'].join(File.separator))
			include '**'
		}
		resources {
			srcDir(['src', 'main', 'resources', 'META-INF'].join(File.separator))
			include 'allpermission.policy'
		}
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// core ////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	coreApi {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'core', 'api'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
	}
	coreImpl {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'core', 'impl'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.coreApi.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// storage API adapters ////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	storageAdapterAtmos {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 'atmos'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	storageAdapterS3 {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 's3'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	storageAdapterSwift {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 'swift'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// misc ////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	serverApi {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'server', 'api'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.coreApi.output
	}
	webserver {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'webserver'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// run modes ///////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	client {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'client'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.serverApi.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	serverImpl {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'server', 'impl'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.serverApi.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	scenario {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'scenario'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
	}
	cli {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'cli'].join(File.separator))
			include '**'
		}
	}
	storageMock {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'mock'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	webui {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'webui'].join(File.separator))
			include '**'
		}
		//
		compileClasspath += sourceSets.common.output + sourceSets.scenario.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
		compileClasspath += sourceSets.serverApi.output + sourceSets.serverImpl.output
		compileClasspath += sourceSets.storageMock.output
		//
		runtimeClasspath += sourceSets.client.output + sourceSets.storageMock.output
		runtimeClasspath += sourceSets.storageAdapterAtmos.output + sourceSets.storageAdapterS3.output + sourceSets.storageAdapterSwift.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// launcher ////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	run {
		java {
			srcDirs(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'main'].join(File.separator))
			include '**'
		}
		//
		compileClasspath += sourceSets.common.output + sourceSets.scenario.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
		compileClasspath += sourceSets.serverApi.output + sourceSets.serverImpl.output
		compileClasspath += sourceSets.webserver.output + sourceSets.webui.output
		compileClasspath += sourceSets.cli.output + sourceSets.storageMock.output
		//
		runtimeClasspath += sourceSets.client.output + sourceSets.webui.output
		runtimeClasspath += sourceSets.storageAdapterAtmos.output + sourceSets.storageAdapterS3.output + sourceSets.storageAdapterSwift.output
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// dependencies ////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

repositories {
	mavenCentral()
}
apply from: "deps.gradle"

dependencies {

	// common
	commonCompile (
		library.commons_configuration,
		library.commons_lang,
		library.commons_collections4,
		library.httpcore_plus_nio,
		library.log4j_api_plus_core,
		library.jackson_core,
		library.jackson_databind,
	)
	commonRuntime (
		library.runtime_logging,
	)

	// core
	coreApiCompile (
		library.commons_configuration,
		library.httpcore_plus_nio,
		library.log4j_api,
	)
	coreImplCompile (
		library.commons_codec,
		library.commons_configuration,
		library.commons_collections4,
		library.httpcore_plus_nio,
		library.log4j_api,
		library.metrics_core,
	)

	// storage API adapters
	storageAdapterAtmosCompile (
		library.commons_codec,
		library.commons_configuration,
		library.commons_lang,
		library.httpcore,
		library.log4j_api,
	)
	storageAdapterS3Compile (
		library.commons_lang,
		library.commons_configuration,
		library.httpcore,
		library.log4j_api,
	)
	storageAdapterSwiftCompile (
		library.commons_lang,
		library.commons_configuration,
		library.httpcore,
		library.log4j_api,
		library.jackson_core
	)

	// misc
	serverApiCompile (
		library.httpcore,
	)
	webserverCompile (
		library.commons_configuration,
		library.log4j_api,
		library.jetty_svc,
	)

	// run modes
	cliCompile (
		library.commons_cli,
		library.commons_lang,
	)
	clientCompile (
		library.commons_configuration,
		library.httpcore,
		library.log4j_api,
		library.metrics_core,
	)
	serverImplCompile (
		library.commons_configuration,
		library.httpcore,
		library.log4j_api,
	)
	scenarioCompile (
		library.commons_configuration,
		library.log4j_api,
	)
	storageMockCompile(
		library.commons_codec,
		library.commons_collections4,
		library.commons_configuration,
		library.httpcore_plus_nio,
		library.log4j_api,
		library.metrics_core,
	)
	webuiCompile (
		library.commons_collections4,
		library.commons_configuration,
		library.jackson_databind,
		library.jsp_api,
		library.log4j_api_plus_core,
		library.websockets,
	)

	// launcher
	runCompile (
		library.commons_configuration,
		library.log4j_api_plus_core,
	)

	// unit tests
	testCompile group: 'junit', name: 'junit', version: '4.11'
}


def allDepsClsPath = configurations.all.collect { libsDirName + File.separator + it.name }.join(' ')

task compileRMI(dependsOn: "compileServerImplJava") << {
	String[] listClsRemote = [
		'com.emc.mongoose.server.impl.persist.TmpFileItemBufferSvc',
		'com.emc.mongoose.server.impl.load.builder.BasicWSLoadBuilderSvc',
		'com.emc.mongoose.server.impl.load.executor.BasicWSLoadSvc'
	]
	String clsPath = [
		"${sourceSets.common.output.classesDir}",
		"${sourceSets.coreApi.output.classesDir}",
		"${sourceSets.coreImpl.output.classesDir}",
		"${sourceSets.serverApi.output.classesDir}",
		"${sourceSets.serverImpl.output.classesDir}",
		"${configurations.serverImplCompile.asPath}",
	].join(File.pathSeparator)
	for(cls in listClsRemote) {
		String command = """rmic -classpath ${clsPath} -d ${sourceSets.serverImpl.output.classesDir} ${cls}"""
		String test = command.execute().text
		print test
	}
}

ext.sharedManifest = manifest {
	attributes('Implementation-Version': version)
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// common //////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task commonJar(type: Jar) {
	archiveName "${baseName}-common.${extension}"
	from sourceSets.common.output
	manifest {
		from sharedManifest
		attributes ('Implementation-Title': rootProject.name + "-core-api")
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// core ////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task coreApiJar(type: Jar) {
	dependsOn commonJar
	archiveName "${baseName}-core-api.${extension}"
	from sourceSets.coreApi.output
	manifest {
		from sharedManifest
		attributes (
			'Implementation-Title': rootProject.name + "-core-api",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task coreImplJar(type: Jar) {
	dependsOn commonJar, coreApiJar
	archiveName "${baseName}-core-impl.${extension}"
	from sourceSets.coreImpl.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-core-impl",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// storage API adapters ////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task storageAdapterAtmosJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar
	archiveName "${baseName}-storage-adapter-atmos.${extension}"
	from sourceSets.storageAdapterAtmos.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-storage-adapter-atmos",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task storageAdapterS3Jar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar
	archiveName "${baseName}-storage-adapter-s3.${extension}"
	from sourceSets.storageAdapterS3.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-storage-adapter-s3s",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task storageAdapterSwiftJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar
	archiveName "${baseName}-storage-adapter-swift.${extension}"
	from sourceSets.storageAdapterSwift.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-storage-adapter-swift",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// misc ////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task serverApiJar(type: Jar) {
	dependsOn commonJar, coreApiJar
	archiveName "${baseName}-server-api.${extension}"
	from sourceSets.serverApi.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-server-api",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task webserverJar(type: Jar) {
	dependsOn commonJar, compileRMI
	archiveName "${baseName}-webserver.${extension}"
	from sourceSets.webserver.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-webserver",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' ')
			].join(' ')
		)
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// run modes ///////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task cliJar(type: Jar) {
	archiveName "${baseName}-cli.${extension}"
	from sourceSets.cli.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-cli",
			'Class-Path': [
				allDepsClsPath,
			].join(' ')
		)
	}
}

task clientJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar, serverApiJar
	archiveName "${baseName}-client.${extension}"
	from sourceSets.client.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-client-impl",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task scenarioJar(type: Jar) {
	dependsOn commonJar
	archiveName "${baseName}-scenario.${extension}"
	from sourceSets.scenario.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-scenario",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' ')
			].join(' ')
		)
	}
}

task serverImplJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar, serverApiJar, compileRMI
	archiveName "${baseName}-server-impl.${extension}"
	from sourceSets.serverImpl.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-server-impl",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task storageMockJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar
	archiveName "${baseName}-storage-mock.${extension}"
	from sourceSets.storageMock.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-storage-mock",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task webuiJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar, scenarioJar, serverApiJar, serverImplJar, storageMockJar
	archiveName "${baseName}-webui.${extension}"
	from sourceSets.webui.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-webui",
			'Class-Path': [
				allDepsClsPath,
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				scenarioJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
				serverImplJar.outputs.files.collect {it.name}.join(' '),
				storageMockJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// entry point /////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task runJar(type: Jar) {
	dependsOn commonJar, storageMockJar, coreApiJar, coreImplJar
	dependsOn coreApiJar, coreImplJar, serverApiJar, serverImplJar
	dependsOn storageAdapterAtmosJar, storageAdapterS3Jar, storageAdapterSwiftJar
	dependsOn cliJar, clientJar, scenarioJar, webuiJar
	archiveName "${baseName}.${extension}"
	from sourceSets.run.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-run",
			'Main-Class': 'com.emc.mongoose.run.Main',
			'Class-Path': [
				allDepsClsPath,
				clientJar.outputs.files.collect {it.name}.join(' '),
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
				serverImplJar.outputs.files.collect {it.name}.join(' '),
				storageAdapterAtmosJar.outputs.files.collect {it.name}.join(' '),
				storageAdapterS3Jar.outputs.files.collect {it.name}.join(' '),
				storageAdapterSwiftJar.outputs.files.collect {it.name}.join(' '),
				storageMockJar.outputs.files.collect {it.name}.join(' '),
				cliJar.outputs.files.collect {it.name}.join(' '),
				scenarioJar.outputs.files.collect {it.name}.join(' '),
				webserverJar.outputs.files.collect {it.name}.join(' '),
				webuiJar.outputs.files.collect {it.name}.join(' '),
			].join(' ')
		)
	}
}

task dist(type: Tar) {

	dependsOn commonJar
	dependsOn coreApiJar
	dependsOn coreImplJar
	dependsOn storageAdapterAtmosJar
	dependsOn storageAdapterS3Jar
	dependsOn storageAdapterSwiftJar
	dependsOn clientJar
	dependsOn serverApiJar
	dependsOn serverImplJar
	dependsOn storageMockJar
	dependsOn cliJar
	dependsOn scenarioJar
	dependsOn webserverJar
	dependsOn runJar
	dependsOn webuiJar

	baseName = project.name
	compression = Compression.GZIP
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	into(baseName + '-' + version) {
		into('conf') {
			from { 'conf' }
		}
		into('lib') {
			from configurations.all
		}
		from commonJar.outputs.files
		from coreApiJar.outputs.files
		from coreImplJar.outputs.files
		from storageAdapterAtmosJar.outputs.files
		from storageAdapterS3Jar.outputs.files
		from storageAdapterSwiftJar.outputs.files
		from clientJar.outputs.files
		from serverApiJar.outputs.files
		from serverImplJar.outputs.files
		from storageMockJar.outputs.files
		from webuiJar.outputs.files
		from cliJar.outputs.files
		from scenarioJar.outputs.files
		from webserverJar.outputs.files
		from runJar.outputs.files
		into('scripts') {
			from { sourceSets.test.resources }
		}
		into('webapp') {
			from { ["src", "main", "webapp"].join(File.separator) }
		}
		into(["webapp", "WEB-INF", "lib"].join(File.separator)) {
			from { configurations.all { dep -> dep.name == 'jstl' } }
			from { configurations.all { dep -> dep.name == 'log4j-web' } }
		}
	}
}

idea {
	module {
		name = rootProject.name
		jdkName = sourceCompatibility
	}
	project.ipr {
		withXml { provider ->
			provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
		}
	}
}

tasks.idea.dependsOn(cleanIdea)

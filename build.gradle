import groovy.json.JsonSlurper

description = 'Mongoose - high-load storage performance testing automation tool'

def loadProjectVersionFrom(String sourceFileName) {
	def inputFile = new File(sourceFileName)
	def json = new JsonSlurper().parseText(inputFile.text)
	json.version
}

def collectFilePath(String... pathChunks) {
	def pathBuilder = new StringBuilder()
	def separator = File.separator
	pathChunks.each {
		pathBuilder.append(separator)
		pathBuilder.append(it)
	}
	pathBuilder.toString()
}

def configFilePath = "." + collectFilePath('common', 'src', 'main', 'resources', 'defaults.json');
version = loadProjectVersionFrom configFilePath

subprojects {
	apply plugin: "java"

	version = super.version

	tasks.withType(JavaCompile) {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}

	task "create-dirs" << {
		sourceSets*.java.srcDirs*.each { it.mkdirs() }
		sourceSets*.resources.srcDirs*.each { it.mkdirs() }
	}

	repositories {
		mavenCentral()
	}

	def log4jVersion = '2.6.1';
	def nettyVersion = '4.1.2.Final';

	dependencies {
		compile "commons-lang:commons-lang:2.6"
		compile "org.apache.commons:commons-collections4:4.1"

		compile "org.apache.logging.log4j:log4j-core:${log4jVersion}"
		compile "org.apache.logging.log4j:log4j-iostreams:${log4jVersion}"

		compile "javax.json:javax.json-api:1.0"
		compile "org.glassfish:javax.json:1.0.4"

		compile "io.netty:netty-common:${nettyVersion}"
		compile "io.netty:netty-buffer:${nettyVersion}"
		compile "io.netty:netty-transport:${nettyVersion}"
		compile "io.netty:netty-handler:${nettyVersion}"
		compile "io.netty:netty-codec-http:${nettyVersion}"

		compile 'org.eclipse.jetty:jetty-util:9.4.0.M0'

		testCompile "junit:junit:4.12"
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "2.14"
}
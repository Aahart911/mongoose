import org.gradle.api.tasks.bundling.Compression
import groovy.json.JsonSlurper

apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'war'

sourceCompatibility = '1.7'

distsDirName = 'dist'
dependencyCacheDirName = 'tmp'

def libsDirName = 'lib'
def confDirName = 'conf'

def loadProjectVersionFrom(String sourceFileName) {
	def inputFile = new File(sourceFileName)
	def json = new JsonSlurper().parseText(inputFile.text)
	ext.version = json.properties.run.version
}
loadProjectVersionFrom confDirName + File.separator + project.name + ".json"
version = ext.version

task wrapper(type: Wrapper) {
	gradleVersion = '1.7'
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// source sets//////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

sourceSets {
	////////////////////////////////////////////////////////////////////////////////////////////////
	// shared basic functionality //////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	common {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'common'].join(File.separator))
			include '**'
		}
		resources {
			srcDir(['src', 'main', 'resources'].join(File.separator))
			include 'allpermissions.policy'
		}
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// core ////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	coreApi {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'core', 'api'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
	}
	coreImpl {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'core', 'impl'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.coreApi.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// storage API adapters ////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	storageAdapterAtmos {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 'atmos'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	storageAdapterS3 {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 's3'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	storageAdapterSwift {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 'swift'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// misc ////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	serverApi {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'server', 'api'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.coreApi.output
	}
	webserver {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'webserver'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// run modes ///////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	client {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'client'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.serverApi.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	scenario {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'scenario'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
	}
	serverImpl {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'server', 'impl'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output + sourceSets.serverApi.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	storageMock {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'mock'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
		compileClasspath += sourceSets.storageAdapterAtmos.output + sourceSets.storageAdapterS3.output + sourceSets.storageAdapterSwift.output
	}
	webui {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'webui'].join(File.separator))
			include '**'
		}
		//
		compileClasspath += sourceSets.common.output + sourceSets.scenario.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
		compileClasspath += sourceSets.serverApi.output + sourceSets.serverImpl.output
		compileClasspath += sourceSets.storageMock.output
		//
		runtimeClasspath += sourceSets.client.output + sourceSets.storageMock.output
		runtimeClasspath += sourceSets.storageAdapterAtmos.output + sourceSets.storageAdapterS3.output + sourceSets.storageAdapterSwift.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// launcher ////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	cli {
		java {
			srcDirs(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'cli'].join(File.separator))
			include '**'
		}
		//
		compileClasspath += sourceSets.common.output + sourceSets.scenario.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
		compileClasspath += sourceSets.serverApi.output + sourceSets.serverImpl.output
		compileClasspath += sourceSets.webserver.output + sourceSets.webui.output
		compileClasspath += sourceSets.storageMock.output
		//
		runtimeClasspath += sourceSets.client.output + sourceSets.webui.output
		runtimeClasspath += sourceSets.storageAdapterAtmos.output + sourceSets.storageAdapterS3.output + sourceSets.storageAdapterSwift.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// JUnit 4 tests ///////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	jUTest {
		java {
			srcDirs(['src', 'main', 'java', 'test', 'com', 'emc', 'mongoose'].join(File.separator))
			include '**'
		}
		//
		compileClasspath += sourceSets.coreImpl.output

	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// dependencies ////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

repositories {
	mavenCentral()
}
apply from: "deps.gradle"

dependencies {

	// common
	commonCompile (
		library.commons_configuration,
		library.commons_lang,
		library.commons_collections4,
		library.httpcore_plus_nio,
		library.log4j_api_plus_core,
		library.jackson_core,
		library.jackson_databind,
	)
	commonRuntime (
		library.runtime_logging,
	)

	// core
	coreApiCompile (
		library.commons_configuration,
		library.httpcore_plus_nio,
		library.log4j_api,
	)
	coreApiRuntime (
		library.runtime_logging,
	)

	coreImplCompile (
		library.commons_codec,
		library.commons_configuration,
		library.commons_collections4,
		library.httpcore_plus_nio,
		library.log4j_api,
		library.metrics_core,
	)
	coreImplRuntime(
		library.runtime_logging,
	)

	// storage API adapters
	storageAdapterAtmosCompile (
		library.commons_codec,
		library.commons_configuration,
		library.commons_lang,
		library.httpcore,
		library.log4j_api,
	)
	storageAdapterAtmosRuntime (
		library.runtime_logging,
	)

	storageAdapterS3Compile (
		library.commons_lang,
		library.commons_configuration,
		library.httpcore,
		library.log4j_api,
	)
	storageAdapterS3Runtime (
		library.runtime_logging,
	)

	storageAdapterSwiftCompile (
		library.commons_lang,
		library.commons_configuration,
		library.httpcore,
		library.log4j_api,
		library.jackson_core,
	)
	storageAdapterSwiftRuntime (
		library.runtime_logging,
	)

	// misc
	serverApiCompile (
		library.httpcore,
	)
	serverApiRuntime (
		library.runtime_logging,
	)

	webserverCompile (
		library.commons_configuration,
		library.log4j_api,
		library.jetty_svc,
	)
	webserverRuntime (
		library.runtime_logging,
		library.runtime_jetty_svc,
	)

	// run modes

	clientCompile (
		library.commons_configuration,
		library.httpcore,
		library.log4j_api,
		library.metrics_core,
	)
	clientRuntime (
		library.runtime_logging,
		library.slf4j_api,
	)

	serverImplCompile (
		library.commons_collections4,
		library.commons_configuration,
		library.httpcore,
		library.log4j_api,
	)
	serverImplRuntime (
		library.runtime_logging,
	)

	scenarioCompile (
		library.commons_configuration,
		library.log4j_api,
	)
	scenarioRuntime (
		library.jython,
		//library.rhino,
		library.runtime_logging,
	)

	storageMockCompile(
		library.commons_codec,
		library.commons_collections4,
		library.commons_configuration,
		library.httpcore_plus_nio,
		library.log4j_api,
		library.metrics_core,
	)
	storageMockRuntime (
		library.runtime_logging,
	)

	webuiCompile (
		library.commons_collections4,
		library.commons_configuration,
		library.jackson_databind,
		library.log4j_api_plus_core,
		library.websockets,
	)
	webuiRuntime (
		library.runtime_logging,
		library.runtime_jetty,
		library.runtime_webapp,
		library.ecj,
		library.ant,
		library.websocket_client,
		library.websocket_common,
		library.websocket_core,
		library.websocket_server,
	)

	// launcher
	cliCompile (
		library.commons_cli,
		library.commons_configuration,
		library.commons_lang,
		library.log4j_api_plus_core,
	)
	cliRuntime (
		library.runtime_logging,
	)

	jUTestCompile (
		library.junit,
		library.junit_easy_mock,
	)

}

configurations {
	allRuntime.extendsFrom(
		commonRuntime,
		coreApiRuntime,
		coreImplRuntime,
		storageAdapterAtmosImplRuntime,
		storageAdapterS3Runtime,
		storageAdapterSwiftRuntime,
		serverApiRuntime,
		webserverRuntime,
		clientRuntime,
		scenarioRuntime,
		serverImplRuntime,
		storageMockRuntime,
		webuiRuntime,
		cliRuntime,
	)
}

////////////////////////////////////////////////////////////////////////////////////////////////////

task compileRMI(dependsOn: "compileServerImplJava") << {
	String[] listClsRemote = [
			'com.emc.mongoose.server.impl.persist.TmpFileItemBufferSvc',
			'com.emc.mongoose.server.impl.load.builder.BasicWSLoadBuilderSvc',
			'com.emc.mongoose.server.impl.load.executor.BasicWSLoadSvc'
	]
	String clsPath = [
			"${sourceSets.common.output.classesDir}",
			"${sourceSets.coreApi.output.classesDir}",
			"${sourceSets.coreImpl.output.classesDir}",
			"${sourceSets.serverApi.output.classesDir}",
			"${sourceSets.serverImpl.output.classesDir}",
			"${configurations.serverImplCompile.asPath}",
	].join(File.pathSeparator)
	for(cls in listClsRemote) {
		String command = """rmic -classpath ${clsPath} -d ${sourceSets.serverImpl.output.classesDir} ${cls}"""
		String test = command.execute().text
		print test
	}
}

ext.sharedManifest = manifest {
	attributes('Implementation-Version': version)
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// common //////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task commonJar(type: Jar) {
	archiveName "${baseName}-common.${extension}"
	from sourceSets.common.output
	manifest {
		from sharedManifest
		attributes (
				'Implementation-Title': rootProject.name + "-common",
				'Class-Path': configurations.commonRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
		)
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// core ////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task coreApiJar(type: Jar) {
	dependsOn commonJar
	archiveName "${baseName}-core-api.${extension}"
	from sourceSets.coreApi.output
	manifest {
		from sharedManifest
		attributes (
				'Implementation-Title': rootProject.name + "-core-api",
				'Class-Path': [
						commonJar.outputs.files.collect {it.name}.join(' '),
						configurations.coreApiRuntime.collect {
							libsDirName + File.separator + it.getName()
						}.join(' '),
				].join(' ')
		)
	}
}

task coreImplJar(type: Jar) {
	dependsOn commonJar, coreApiJar
	archiveName "${baseName}-core-impl.${extension}"
	from sourceSets.coreImpl.output
	manifest {
		from sharedManifest
		attributes(
				'Implementation-Title': rootProject.name + "-core-impl",
				'Class-Path': [
						commonJar.outputs.files.collect {it.name}.join(' '),
						coreApiJar.outputs.files.collect {it.name}.join(' '),
						configurations.coreImplRuntime.collect {
							libsDirName + File.separator + it.getName()
						}.join(' '),
				].join(' ')
		)
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// storage API adapters ////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task storageAdapterAtmosJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar
	archiveName "${baseName}-storage-adapter-atmos.${extension}"
	from sourceSets.storageAdapterAtmos.output
	manifest {
		from sharedManifest
		attributes(
				'Implementation-Title': rootProject.name + "-storage-adapter-atmos",
				'Class-Path': [
						commonJar.outputs.files.collect {it.name}.join(' '),
						coreApiJar.outputs.files.collect {it.name}.join(' '),
						coreImplJar.outputs.files.collect {it.name}.join(' '),
						configurations.storageAdapterAtmosRuntime.collect {
							libsDirName + File.separator + it.getName()
						}.join(' '),
				].join(' ')
		)
	}
}

task storageAdapterS3Jar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar
	archiveName "${baseName}-storage-adapter-s3.${extension}"
	from sourceSets.storageAdapterS3.output
	manifest {
		from sharedManifest
		attributes(
				'Implementation-Title': rootProject.name + "-storage-adapter-s3s",
				'Class-Path': [
						commonJar.outputs.files.collect {it.name}.join(' '),
						coreApiJar.outputs.files.collect {it.name}.join(' '),
						coreImplJar.outputs.files.collect {it.name}.join(' '),
						configurations.storageAdapterS3Runtime.collect {
							libsDirName + File.separator + it.getName()
						}.join(' '),
				].join(' ')
		)
	}
}

task storageAdapterSwiftJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar
	archiveName "${baseName}-storage-adapter-swift.${extension}"
	from sourceSets.storageAdapterSwift.output
	manifest {
		from sharedManifest
		attributes(
				'Implementation-Title': rootProject.name + "-storage-adapter-swift",
				'Class-Path': [
						commonJar.outputs.files.collect {it.name}.join(' '),
						coreApiJar.outputs.files.collect {it.name}.join(' '),
						coreImplJar.outputs.files.collect {it.name}.join(' '),
						configurations.storageAdapterSwiftRuntime.collect {
							libsDirName + File.separator + it.getName()
						}.join(' '),
				].join(' ')
		)
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// misc ////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task serverApiJar(type: Jar) {
	dependsOn commonJar, coreApiJar
	archiveName "${baseName}-server-api.${extension}"
	from sourceSets.serverApi.output
	manifest {
		from sharedManifest
		attributes(
				'Implementation-Title': rootProject.name + "-server-api",
				'Class-Path': [
						commonJar.outputs.files.collect {it.name}.join(' '),
						coreApiJar.outputs.files.collect {it.name}.join(' '),
						configurations.serverApiRuntime.collect {
							libsDirName + File.separator + it.getName()
						}.join(' '),
				].join(' ')
		)
	}
}

task webserverJar(type: Jar) {
	dependsOn commonJar, compileRMI
	archiveName "${baseName}-webserver.${extension}"
	from sourceSets.webserver.output
	manifest {
		from sharedManifest
		attributes(
				'Implementation-Title': rootProject.name + "-webserver",
				'Class-Path': [
						commonJar.outputs.files.collect {it.name}.join(' '),
						configurations.webserverRuntime.collect {
							libsDirName + File.separator + it.getName()
						}.join(' '),
				].join(' ')
		)
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// run modes ///////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task clientJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar, serverApiJar
	archiveName "${baseName}-client.${extension}"
	from sourceSets.client.output
	manifest {
		from sharedManifest
		attributes(
				'Implementation-Title': rootProject.name + "-client-impl",
				'Class-Path': [
						commonJar.outputs.files.collect {it.name}.join(' '),
						coreApiJar.outputs.files.collect {it.name}.join(' '),
						coreImplJar.outputs.files.collect {it.name}.join(' '),
						serverApiJar.outputs.files.collect {it.name}.join(' '),
						configurations.clientRuntime.collect {
							libsDirName + File.separator + it.getName()
						}.join(' '),
				].join(' ')
		)
	}
}

task scenarioJar(type: Jar) {
	dependsOn commonJar
	archiveName "${baseName}-scenario.${extension}"
	from sourceSets.scenario.output
	manifest {
		from sharedManifest
		attributes(
				'Implementation-Title': rootProject.name + "-scenario",
				'Class-Path': [
						commonJar.outputs.files.collect {it.name}.join(' '),
						configurations.scenarioRuntime.collect {
							libsDirName + File.separator + it.getName()
						}.join(' '),
				].join(' ')
		)
	}
}

task serverImplJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar, serverApiJar, compileRMI
	archiveName "${baseName}-server-impl.${extension}"
	from sourceSets.serverImpl.output
	manifest {
		from sharedManifest
		attributes(
				'Implementation-Title': rootProject.name + "-server-impl",
				'Class-Path': [
						commonJar.outputs.files.collect {it.name}.join(' '),
						coreApiJar.outputs.files.collect {it.name}.join(' '),
						coreImplJar.outputs.files.collect {it.name}.join(' '),
						serverApiJar.outputs.files.collect {it.name}.join(' '),
						configurations.serverImplRuntime.collect {
							libsDirName + File.separator + it.getName()
						}.join(' '),
				].join(' ')
		)
	}
}

task storageMockJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar
	archiveName "${baseName}-storage-mock.${extension}"
	from sourceSets.storageMock.output
	manifest {
		from sharedManifest
		attributes(
				'Implementation-Title': rootProject.name + "-storage-mock",
				'Class-Path': [
						commonJar.outputs.files.collect {it.name}.join(' '),
						coreApiJar.outputs.files.collect {it.name}.join(' '),
						coreImplJar.outputs.files.collect {it.name}.join(' '),
						configurations.storageMockRuntime.collect {
							libsDirName + File.separator + it.getName()
						}.join(' '),
				].join(' ')
		)
	}
}

task webuiJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar, scenarioJar, serverApiJar, serverImplJar, storageMockJar
	archiveName "${baseName}-webui.${extension}"
	from sourceSets.webui.output
	manifest {
		from sharedManifest
		attributes(
				'Implementation-Title': rootProject.name + "-webui",
				'Class-Path': [
						commonJar.outputs.files.collect {it.name}.join(' '),
						coreApiJar.outputs.files.collect {it.name}.join(' '),
						coreImplJar.outputs.files.collect {it.name}.join(' '),
						scenarioJar.outputs.files.collect {it.name}.join(' '),
						serverApiJar.outputs.files.collect {it.name}.join(' '),
						serverImplJar.outputs.files.collect {it.name}.join(' '),
						storageMockJar.outputs.files.collect {it.name}.join(' '),
						configurations.webuiRuntime.collect {
							libsDirName + File.separator + it.getName()
						}.join(' '),
				].join(' ')
		)
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// entry point /////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task cliJar(type: Jar) {
	dependsOn commonJar, storageMockJar, coreApiJar, coreImplJar
	dependsOn coreApiJar, coreImplJar, serverApiJar, serverImplJar
	dependsOn storageAdapterAtmosJar, storageAdapterS3Jar, storageAdapterSwiftJar
	dependsOn clientJar, scenarioJar, webuiJar
	archiveName "${baseName}.${extension}"
	from sourceSets.cli.output
	manifest {
		from sharedManifest
		attributes(
				'Implementation-Title': rootProject.name + "-cli",
				'Main-Class': "com.emc.mongoose.run.cli.ModeDispatcher",
				'Class-Path': [
						clientJar.outputs.files.collect {it.name}.join(' '),
						commonJar.outputs.files.collect {it.name}.join(' '),
						coreApiJar.outputs.files.collect {it.name}.join(' '),
						coreImplJar.outputs.files.collect {it.name}.join(' '),
						serverApiJar.outputs.files.collect {it.name}.join(' '),
						serverImplJar.outputs.files.collect {it.name}.join(' '),
						storageAdapterAtmosJar.outputs.files.collect {it.name}.join(' '),
						storageAdapterS3Jar.outputs.files.collect {it.name}.join(' '),
						storageAdapterSwiftJar.outputs.files.collect {it.name}.join(' '),
						storageMockJar.outputs.files.collect {it.name}.join(' '),
						scenarioJar.outputs.files.collect {it.name}.join(' '),
						webserverJar.outputs.files.collect {it.name}.join(' '),
						webuiJar.outputs.files.collect {it.name}.join(' '),
						configurations.cliRuntime.collect {
							libsDirName + File.separator + it.getName()
						}.join(' '),
				].join(' ')
		)
	}
}

task dist(type: Tar) {

	dependsOn commonJar
	dependsOn coreApiJar
	dependsOn coreImplJar
	dependsOn storageAdapterAtmosJar
	dependsOn storageAdapterS3Jar
	dependsOn storageAdapterSwiftJar
	dependsOn serverApiJar
	dependsOn webserverJar
	dependsOn clientJar
	dependsOn scenarioJar
	dependsOn serverImplJar
	dependsOn storageMockJar
	dependsOn webuiJar
	dependsOn cliJar

	baseName = project.name
	compression = Compression.GZIP
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	List webappLibs = new LinkedList()
	configurations.webuiRuntime.collect {
		def path = it.getAbsolutePath()
		if(
			it.isFile() && (path.contains("jstl") ||
			path.contains("log4j-web") ||
			path.contains("webjars"))
		) {
			webappLibs.add(path)
		}
	}

	into(baseName + '-' + version) {
		into('conf') {
			from { 'conf' }
		}
		into('lib') {
			from { configurations.allRuntime }
		}
		from commonJar.outputs.files
		from coreApiJar.outputs.files
		from coreImplJar.outputs.files
		from storageAdapterAtmosJar.outputs.files
		from storageAdapterS3Jar.outputs.files
		from storageAdapterSwiftJar.outputs.files
		from serverApiJar.outputs.files
		from webserverJar.outputs.files
		from clientJar.outputs.files
		from scenarioJar.outputs.files
		from serverImplJar.outputs.files
		from storageMockJar.outputs.files
		from webuiJar.outputs.files
		from cliJar.outputs.files
		into('scripts') {
			from { ["src", "main", "resources", "scripts"].join(File.separator) }
		}
		into('webapp') {
			from { ["src", "main", "webapp"].join(File.separator) }
		}
		into(["webapp", "WEB-INF", "lib"].join(File.separator)) {
			from { webappLibs }
		}
	}
}

idea {
	module {
		name = rootProject.name
		jdkName = sourceCompatibility
		scopes.PROVIDED.plus += [ configurations.allRuntime ]
	}
	project.ipr {
		withXml { provider ->
			provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
		}
	}
}

task jUTest(type: Test) {
	dependsOn coreImplJar
	description = "Runs tests"
	testClassesDir = sourceSets.jUTest.output.classesDir
	classpath = (sourceSets.jUTest.runtimeClasspath
			+ sourceSets.coreImpl.runtimeClasspath)
	useJUnit()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

tasks.idea.dependsOn(cleanIdea)
